"""
1. Проанализировать скорость и сложность одного любого алгоритма, разработанных в рамках практического задания
первых трех уроков.
Примечание: попробуйте написать несколько реализаций алгоритма и сравнить их.

----------------------------

Возьмем алгоритм из 4-го задания 2-го урока.
Найти сумму n элементов следующего ряда чисел: 1 -0.5 0.25 -0.125 ...Количество элементов (n) вводится с клавиатуры.

----------------------------
"""


from timeit import timeit


# Решенице через цикл
def els(count):
    res = 1
    my_sum = 1
    while count != 1:
        count -= 1
        res = res / -2
        my_sum += res
    return my_sum


# Решенице через рекурсию
def rec(cnt, res=1.0):
    base = 1
    if cnt == base:
        return 1
    elif cnt > base:
        res = res / -2
        return res + rec(cnt - 1, res)


n = int(input('Введите число n: '))

print(f'Сумма n элементов следующего ряда чисел: 1 -0.5 0.25 -0.125 равна: {els(n)}')
print(f'Скорость выполнения программы через цикл: {timeit("els(n)", globals=globals())}')
print(f'Скорость выполнения программы через реккурсию: {timeit("els(n)", globals=globals())}')
print('Сложность алгоритма через цикл: O(n)')
print('Сложность алгоритма через рекурсию: O(n^2)')
